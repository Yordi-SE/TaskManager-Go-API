// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"
)

// AuthControllerInterface is an autogenerated mock type for the AuthControllerInterface type
type AuthControllerInterface struct {
	mock.Mock
}

// Login provides a mock function with given fields:
func (_m *AuthControllerInterface) Login() func(*gin.Context) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 func(*gin.Context)
	if rf, ok := ret.Get(0).(func() func(*gin.Context)); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func(*gin.Context))
		}
	}

	return r0
}

// Promote provides a mock function with given fields:
func (_m *AuthControllerInterface) Promote() func(*gin.Context) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Promote")
	}

	var r0 func(*gin.Context)
	if rf, ok := ret.Get(0).(func() func(*gin.Context)); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func(*gin.Context))
		}
	}

	return r0
}

// Register provides a mock function with given fields:
func (_m *AuthControllerInterface) Register() func(*gin.Context) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 func(*gin.Context)
	if rf, ok := ret.Get(0).(func() func(*gin.Context)); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func(*gin.Context))
		}
	}

	return r0
}

// NewAuthControllerInterface creates a new instance of AuthControllerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthControllerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthControllerInterface {
	mock := &AuthControllerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
