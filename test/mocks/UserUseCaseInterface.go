// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	domain "github.com/zaahidali/task_manager_api/Domain"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// UserUseCaseInterface is an autogenerated mock type for the UserUseCaseInterface type
type UserUseCaseInterface struct {
	mock.Mock
}

// Login provides a mock function with given fields: user
func (_m *UserUseCaseInterface) Login(user domain.User) (string, error) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.User) (string, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(domain.User) string); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(domain.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Promote provides a mock function with given fields: user_id
func (_m *UserUseCaseInterface) Promote(user_id primitive.ObjectID) error {
	ret := _m.Called(user_id)

	if len(ret) == 0 {
		panic("no return value specified for Promote")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) error); ok {
		r0 = rf(user_id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Register provides a mock function with given fields: user
func (_m *UserUseCaseInterface) Register(user domain.User) (interface{}, error) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.User) (interface{}, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(domain.User) interface{}); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(domain.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserUseCaseInterface creates a new instance of UserUseCaseInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserUseCaseInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserUseCaseInterface {
	mock := &UserUseCaseInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
