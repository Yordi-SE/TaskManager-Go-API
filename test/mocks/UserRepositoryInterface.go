// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	domain "github.com/zaahidali/task_manager_api/Domain"

	mongo "go.mongodb.org/mongo-driver/mongo"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// UserRepositoryInterface is an autogenerated mock type for the UserRepositoryInterface type
type UserRepositoryInterface struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: user
func (_m *UserRepositoryInterface) CreateUser(user domain.User) (*mongo.InsertOneResult, error) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *mongo.InsertOneResult
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.User) (*mongo.InsertOneResult, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(domain.User) *mongo.InsertOneResult); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.InsertOneResult)
		}
	}

	if rf, ok := ret.Get(1).(func(domain.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUser provides a mock function with given fields: user_id
func (_m *UserRepositoryInterface) FindUser(user_id primitive.ObjectID) (domain.User, error) {
	ret := _m.Called(user_id)

	if len(ret) == 0 {
		panic("no return value specified for FindUser")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) (domain.User, error)); ok {
		return rf(user_id)
	}
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) domain.User); ok {
		r0 = rf(user_id)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(primitive.ObjectID) error); ok {
		r1 = rf(user_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserByName provides a mock function with given fields: user_name
func (_m *UserRepositoryInterface) FindUserByName(user_name string) (domain.User, error) {
	ret := _m.Called(user_name)

	if len(ret) == 0 {
		panic("no return value specified for FindUserByName")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domain.User, error)); ok {
		return rf(user_name)
	}
	if rf, ok := ret.Get(0).(func(string) domain.User); ok {
		r0 = rf(user_name)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(user_name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Promote provides a mock function with given fields: user_id
func (_m *UserRepositoryInterface) Promote(user_id primitive.ObjectID) (*mongo.UpdateResult, error) {
	ret := _m.Called(user_id)

	if len(ret) == 0 {
		panic("no return value specified for Promote")
	}

	var r0 *mongo.UpdateResult
	var r1 error
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) (*mongo.UpdateResult, error)); ok {
		return rf(user_id)
	}
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) *mongo.UpdateResult); ok {
		r0 = rf(user_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.UpdateResult)
		}
	}

	if rf, ok := ret.Get(1).(func(primitive.ObjectID) error); ok {
		r1 = rf(user_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserRepositoryInterface creates a new instance of UserRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepositoryInterface {
	mock := &UserRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
